<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:ctrls="clr-namespace:NowPlaying.Controls"
                    xmlns:utils="clr-namespace:NowPlaying.Utils"
                    xmlns:popt="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">

    <sys:Int32 x:Key="ToolTipInitialShowDelay">500</sys:Int32>
    <sys:Int32 x:Key="ToolTipBetweenShowDelay">1000</sys:Int32>

    <Color x:Key="InstallBgColor">#30000000</Color>
    <Color x:Key="SlowInstallColor">#FFF0D020</Color>
    <Color x:Key="ProcessingFgColor">#80F2F2F2</Color>
    <Color x:Key="ProcessingBgColor">#FF000000</Color>
    <Color x:Key="EnableFgColor">#FF3CB371</Color>
    <Color x:Key="EnableBgColor">#FF1E7B47</Color>
    <Color x:Key="UninstallFgColor">#FFB22222</Color>
    <Color x:Key="UninstallBgColor">#FF700000</Color>
    
    <SolidColorBrush x:Key="InstallBrush" Color="{DynamicResource GlyphColor}"/>
    <SolidColorBrush x:Key="InstallFgBrush" Color="{DynamicResource GlyphColor}" Opacity="0.7"/>
    <SolidColorBrush x:Key="InstallBgBrush" Color="{DynamicResource InstallBgColor}"/>
    <SolidColorBrush x:Key="SlowInstallBrush" Color="{DynamicResource SlowInstallColor}"/>
    <SolidColorBrush x:Key="SlowInstallFgBrush" Color="{DynamicResource SlowInstallColor}" Opacity="0.7"/>
    <SolidColorBrush x:Key="SlowInstallBgBrush" Color="{DynamicResource InstallBgColor}"/>
    <SolidColorBrush x:Key="ProcessingFgBrush" Color="{DynamicResource ProcessingFgColor}"/>
    <SolidColorBrush x:Key="ProcessingBgBrush" Color="{DynamicResource ProcessingBgColor}"/>
    <SolidColorBrush x:Key="EnableFgBrush" Color="{DynamicResource EnableFgColor}"/>
    <SolidColorBrush x:Key="EnableBgBrush" Color="{DynamicResource EnableBgColor}"/>
    <SolidColorBrush x:Key="UninstallFgBrush" Color="{DynamicResource UninstallFgColor}"/>
    <SolidColorBrush x:Key="UninstallBgBrush" Color="{DynamicResource UninstallBgColor}"/>
    
    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize}"/>
    </Style>

    <Style x:Key="HeadingText" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Margin" Value="0,0,0,5"/>
    </Style>

    <Style x:Key="SubheadingText" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Margin" Value="0,0,0,5"/>
    </Style>

    <Style x:Key="SmallButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{DynamicResource ToolTipInitialShowDelay}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{DynamicResource ToolTipBetweenShowDelay}"/>
    </Style>

    <Style x:Key="InTextBoxButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{DynamicResource ToolTipInitialShowDelay}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{DynamicResource ToolTipBetweenShowDelay}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{DynamicResource ToolTipInitialShowDelay}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{DynamicResource ToolTipBetweenShowDelay}"/>
    </Style>

    <Style TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="Padding" Value="5,0.5,5,0.5"/>
        <Setter Property="Margin" Value="0"/>
    </Style>
    
    <Style x:Key="ThemeListViewItem" TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="Padding" Value="5,0.5,5,0.5"/>
        <Setter Property="Margin" Value="0"/>
    </Style>

    <Style x:Key="ThemeListView" TargetType="ListView" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ThemeListViewItem}"/>
    </Style>

    <Style TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize}"/>
    </Style>

    <Style x:Key="BulletedLabel" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <BulletDecorator Margin="{TemplateBinding Margin}">
                        <BulletDecorator.Bullet>
                            <Ellipse Width="5" Height="5" Fill="{TemplateBinding Foreground}"/>
                        </BulletDecorator.Bullet>
                        <TextBlock
                            VerticalAlignment="Top"
                            Text="{TemplateBinding Content}"
                            TextWrapping="Wrap"
                            Padding="10,0,0,0"/>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <utils:BorderClipConverter x:Key="BorderClipConverter"/>
    
    <!--Theme specific styles-->

    <Style TargetType="{x:Type ctrls:PluginSearchBox}" BasedOn="{StaticResource {x:Type SearchBox}}"/>
    <Style x:Key="TopPanelPluginSearchBox" TargetType="ctrls:PluginSearchBox" BasedOn="{StaticResource {x:Type ctrls:PluginSearchBox}}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource TopPanelSearchBoxBackgroundBrush}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{DynamicResource ToolTipInitialShowDelay}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{DynamicResource ToolTipBetweenShowDelay}"/>
    </Style>

    <Style TargetType="{x:Type ctrls:PluginTopPanelItem}" BasedOn="{StaticResource {x:Type TopPanelItem}}"/>
    <Style x:Key="ThemeTopPanelItem" TargetType="ctrls:PluginTopPanelItem" BasedOn="{StaticResource {x:Type ctrls:PluginTopPanelItem}}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{DynamicResource ToolTipInitialShowDelay}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{DynamicResource ToolTipBetweenShowDelay}"/>
    </Style>

    <Style x:Key="TopPanelItem_FusionX" TargetType="TopPanelItem">
        <Setter Property="Margin" Value="4,0,0,0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="MinWidth" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Foreground" Value="{DynamicResource IdleBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TopPanelItem">
                    <Grid>
                        <Rectangle x:Name="HoverBg" Fill="#29FFFFFF" Opacity="0" RadiusX="16" RadiusY="16"/>
                        <Rectangle x:Name="SelectedBg" Fill="#33FFFFFF" Visibility="Collapsed" RadiusX="16" RadiusY="16"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsToggled" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBg"
                                                        Storyboard.TargetProperty="Opacity" 
                                                        To="1" Duration="0:0:0.1">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBg"
                                                        Storyboard.TargetProperty="Opacity" 
                                                        To="0" Duration="0:0:0.1">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsToggled" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedBg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PluginTopPanelItem_FusionX" TargetType="ctrls:PluginTopPanelItem" BasedOn="{StaticResource TopPanelItem_FusionX}"/>

    <Style x:Key="FixedSizeWindow" TargetType="{x:Type WindowBase}" BasedOn="{StaticResource StandardWindowStyle}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="25" CornerRadius="0" ResizeBorderThickness="0"
                          NonClientFrameEdges ="None" UseAeroCaptionButtons="False" GlassFrameThickness="0"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Seaside, Stardust themes main window background gradient-->
    <ImageBrush x:Key="BackgroundGradientBrush" 
            ImageSource="{ThemeFile 'Images/BackgroundGradient.png'}" 
            Stretch="UniformToFill" 
            popt:Freeze="True"/>

    <Style x:Key="ThemeProgressBarStyle" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}"/>

    <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="{Binding ProgressBarRadius}">
                        <Border.Clip>
                            <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}"/>
                            </MultiBinding>
                        </Border.Clip>
                        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Rectangle Fill="{TemplateBinding Background}"/>
                            <Rectangle Name="PART_Track" Margin="0"/>
                            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" VerticalAlignment="Stretch">
                                <Grid>
                                    <Rectangle Fill="{TemplateBinding Foreground}"/>
                                    <Grid x:Name="Animation" Visibility="Hidden">
                                        <Rectangle Fill="{TemplateBinding Background}" Margin="0,0,50,0">
                                            <Rectangle.RenderTransform>
                                                <ScaleTransform x:Name="HiderPreTransform" ScaleX="0"/>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                        <Rectangle Fill="{TemplateBinding Background}" RenderTransformOrigin="1, 0" Margin="50,0,0,0">
                                            <Rectangle.RenderTransform>
                                                <ScaleTransform x:Name="HiderPostTransform" ScaleX="1" />
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                    </Grid>
                                </Grid>
                            </Decorator>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation Storyboard.TargetName="HiderPreTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                         To="1" Duration="0:00:2" AutoReverse="True"/>
                                        <DoubleAnimation Storyboard.TargetName="HiderPostTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                         To="0" Duration="0:00:2" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItem_FusionX" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Rectangle x:Name="HoverRectangle" Visibility="Collapsed" Fill="#29FFFFFF" 
                                   RadiusX="8.5" RadiusY="8.5" Margin="0.5"/>
                        <Rectangle x:Name="SelectedRectangle" Visibility="Collapsed" Fill="#33FFFFFF" 
                                   RadiusX="8.5" RadiusY="8.5" Margin="0.5"/>
                        <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedRectangle" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="HoverRectangle" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectedBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource HoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListView_FusionX" TargetType="ListView" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ListViewItem_FusionX}"/>
    </Style>
    
</ResourceDictionary>